#![feature(fs_try_exists)]

use std::{fmt::Debug, fs::{File, OpenOptions}, io::{Read, Write}, path::{Path, PathBuf}};

use clap::{Parser, Command, Subcommand, command, arg};

#[derive(Subcommand, Debug)]
enum Commands {
    Deobf,
    Obf
}

#[derive(Parser, Debug)]
#[command(author, version, about, long_about = "Deobfuscate a Slay the Spire save file")]
struct Args {
    #[command(subcommand)]
    pub command: Commands,
    pub input: String,
    pub output_file: Option<String>,
}

fn xor_with_key(ciphertext: &[u8], key: &[u8]) -> Vec<u8> {
    let mut out = ciphertext.to_vec();
    for i in 0..ciphertext.len() {
        out[i] = (ciphertext[i] ^ key[i % key.len()]) as u8
    }
    return out
}

fn is_obfuscated<T: AsRef<str>>(data: T) -> bool { 
    !data.as_ref().contains("{")
} 

/// This would be main() but I factored it out for the sake of testing
fn spire_encoder_decoder(arguments: &Args) -> Option<String> { 
    // The key is "key". because f u n y 
    let key_text = String::from("key");
    let key = key_text.as_bytes();

    println!("Parsing {}", &arguments.input);

    let input_path = PathBuf::from(&arguments.input); 
    //Make error handling more informative.
    let input_text = match std::fs::try_exists(&input_path) {
        Ok(true) => {
            println!("Input {} appears to be a file path, opening as a file...", &arguments.input); 
            let mut file = File::open(&input_path).unwrap();
            let mut buf = Vec::new();
            let loaded_len = file.read_to_end(&mut buf).unwrap();
            buf.truncate(loaded_len);
        
            String::from_utf8_lossy(&buf).to_string()
        }
        _ => {
            println!("The input does not appear to be a file path, parsing as the data string directly."); 
            arguments.input.clone()
        }
    };

    match arguments.command {
        Commands::Deobf => { 
            let b64_decoded = base64::decode(input_text.as_bytes()).unwrap();
            let text_maybe = String::from_utf8_lossy(&b64_decoded).to_string();
            let text = match is_obfuscated(&text_maybe) {
                true => { 
                    println!("Text is obfuscated, decoding.");
                    let deciphered_bytes = xor_with_key(text_maybe.as_ref(), &key); 
                    String::from_utf8_lossy(&deciphered_bytes).to_string()
                }
                false => text_maybe.to_string(),
            }; 
            match &arguments.output_file { 
                Some(filename) => {
                    let mut file = OpenOptions::new()
                        .create(true)
                        .write(true)
                        .truncate(true)
                        .open(&filename)
                        .unwrap();
                    let len_wrote = file.write(text.as_bytes()).unwrap();
                    println!("Wrote {} deobfuscated bytes to {}", len_wrote, &filename);
                    None
                }
                None => Some(text),
            }
        }
        Commands::Obf => {
            let enciphered_bytes: Vec<u8> = xor_with_key(input_text.as_ref(), &key); 
            let display_bytes = String::from_utf8_lossy(&enciphered_bytes); 
            println!("Obfuscated {} into {}", &input_text, display_bytes);
            let b64_encoded = base64::encode(&enciphered_bytes);

            match &arguments.output_file { 
                Some(filename) => {
                    println!("Encoded to base64: {}", &b64_encoded);
                    let mut file = OpenOptions::new()
                        .create(true)
                        .write(true)
                        .truncate(true)
                        .open(&filename)
                        .unwrap();
                    let len_wrote = file.write(b64_encoded.as_bytes()).unwrap();
                    println!("Wrote {} deobfuscated bytes to {}", len_wrote, &filename);
                    None
                }
                None => Some(b64_encoded),
            }
        },
    }
}

fn main() {
    let arguments = Args::parse();
    let resl = spire_encoder_decoder(&arguments);
    if let Some(out) = resl { 
        println!("Result:\n{}", out);
    }
}

#[test]
fn identity_no_files() {
    //Test file
    let testing_string = String::from("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STFbR29ZS0VZSSBbYUVZNklzS0VbBQQUDkdDS0c+EhcWSUlzS0VbAwQKNBcMCRwmAAAASV9ZDQQVGABVYUVZSQgcHxcQCDoJBwQAHwwUDkdDS1dKXElzS0VbAwQKNBYYGxURAhccNA4cEkdDSwMYBxYcR29ZS0cQGDoNGQwYB0dDSwMYBxYcR29ZS0cUDhELAgYmBgQBNA0JNBUcGTofBwoWGUdDSz5zS0VZS1JMR29ZS0VZXFBVYUVZS0VOXklzS0VZS1JMR29ZS0VZXFBVYUVZS0VOXklzS0VZS1JMR29ZS0VZXFBVYUVZS0VOXm9ZSzhVYUVZSRYYHQAmDwQNDkdDS1RPXVBIU1FLXVNMXlNVYUVZSQYYGQEKSV9ZMG9ZS0VZEG9ZS0VZS0VbHhUeGQQdDhZbUUVJR29ZS0VZS0VbBgwKCEdDS1VVYUVZS0VZS0cQD0dDS0cqHxcQAAAmKUdzS0VZSxhVYUVZS0UCYUVZS0VZS0cMGwILCgEcGEdDS1VVYUVZS0VZS0cUAhYaSV9ZW0lzS0VZS0VZSQwdSV9ZSTYNGQwSDjo7SW9ZS0VZFklzS0VZSx5zS0VZS0VZSRAJDBcYDwAKSV9ZW0lzS0VZS0VZSQgQGAZbUUVJR29ZS0VZS0VbAgFbUUVbOBELAg4cNCdbYUVZS0UER29ZS0VZEG9ZS0VZS0VbHhUeGQQdDhZbUUVJR29ZS0VZS0VbBgwKCEdDS1VVYUVZS0VZS0cQD0dDS0cqHxcQAAAmKUdzS0VZSxhVYUVZS0UCYUVZS0VZS0cMGwILCgEcGEdDS1VVYUVZS0VZS0cUAhYaSV9ZW0lzS0VZS0VZSQwdSV9ZSSEcDQAXDzo7SW9ZS0VZFklzS0VZSx5zS0VZS0VZSRAJDBcYDwAKSV9ZW0lzS0VZS0VZSQgQGAZbUUVJR29ZS0VZS0VbAgFbUUVbLwAfDgsdNCdbYUVZS0UER29ZS0VZEG9ZS0VZS0VbHhUeGQQdDhZbUUVIR29ZS0VZS0VbBgwKCEdDS1VVYUVZS0VZS0cQD0dDS0c9DgMcBQEmKUdzS0VZSxhVYUVZS0UCYUVZS0VZS0cMGwILCgEcGEdDS1VVYUVZS0VZS0cUAhYaSV9ZW0lzS0VZS0VZSQwdSV9ZSSEcDQAXDzo7SW9ZS0VZFklzS0VZSx5zS0VZS0VZSRAJDBcYDwAKSV9ZW0lzS0VZS0VZSQgQGAZbUUVJR29ZS0VZS0VbAgFbUUVbMQQJSW9ZS0VZFklzS0VZSx5zS0VZS0VZSRAJDBcYDwAKSV9ZW0lzS0VZS0VZSQgQGAZbUUVJR29ZS0VZS0VbAgFbUUVbLxAYBwYYGBFbYUVZS0UER29ZS0VZEG9ZS0VZS0VbHhUeGQQdDhZbUUVIR29ZS0VZS0VbBgwKCEdDS1VVYUVZS0VZS0cQD0dDS0c9BBAbBwBZLgscGQIASW9ZS0VZFklzS0VZSx5zS0VZS0VZSRAJDBcYDwAKSV9ZWklzS0VZS0VZSQgQGAZbUUVJR29ZS0VZS0VbAgFbUUVbKAoVD0UqBQQJSW9ZS0VZFklzS0VZSx5zS0VZS0VZSRAJDBcYDwAKSV9ZW0lzS0VZS0VZSQgQGAZbUUVJR29ZS0VZS0VbAgFbUUVbKAoWBw0cCgEcD0dzS0VZSxhVYUVZS0UCYUVZS0VZS0cMGwILCgEcGEdDS1VVYUVZS0VZS0cUAhYaSV9ZW0lzS0VZS0VZSQwdSV9ZSSEWHgcNSW9ZS0VZFklzS0VZSx5zS0VZS0VZSRAJDBcYDwAKSV9ZW0lzS0VZS0VZSQgQGAZbUUVJR29ZS0VZS0VbAgFbUUVbOBEYHwwaSyEQGAYRChceDkdzS0VZSxhVYUVZS0UCYUVZS0VZS0cMGwILCgEcGEdDS1VVYUVZS0VZS0cUAhYaSV9ZW0lzS0VZS0VZSQwdSV9ZSTEMGQcWSW9ZS0VZFklzS0VZSx5zS0VZS0VZSRAJDBcYDwAKSV9ZW0lzS0VZS0VZSQgQGAZbUUVJR29ZS0VZS0VbAgFbUUVbIgsTHhcASW9ZS0VZFm9ZSzhVYUVZSQAXDwkcGBYmAgsaGQAUDgsNGEdDSz4kR29ZS0cUDhELAgYmAhEcBhYmGxALDAAdSV9ZMDhVYUVZSRUMGQIcKAoKH0dDS1JMR29ZS0cLBAoUNB1bUUVJR29ZS0cbBwweAxEmCAoMBREcGRZbUUUiNklzS0VbGQoWBjoASV9ZUklzS0VbBgANGQwaNAIWBwEmGwALNAMVBAoLSV9ZMG9ZS0VZWlRBR29ZS0VZWlZNR29ZS0VZWlBKR29ZS0VZWFdBR29ZS0VZWFdBR29ZS0VZWFBMR29ZS0VZWFBMR29ZS0VZWVdVYUVZS0VLWW9ZSzhVYUVZSQgcHxcQCDoJBBEQBAsKNAMVBAoLNBAKCgIcSV9ZMG9ZS0VZXW9ZSzhVYUVZSQcWGBYmBwwKH0dDSz5zS0VZS0cqBwwUDkU7BBYKSUlzS0VZS0cxDh0YDA0WGBFbR29ZS0VZSTERDkU+HgQLDwwYBUdzS0UkR29ZS0cYAjoKDgAdNAYWHgsNSV9ZW0lzS0VbDhMcBREmCA0YBQYcGEdDSz5zS0VZS1VXX0lzS0VZS1VXX0lzS0VZS1VXWlFAUlxAUlxVYUVZS0VJRVVAUlxAUlxAX29ZSzhVYUVZSQgcHxcQCDobBBYKNBccBwwaGEdDSz4kR29ZS0cLDgkQCDoKDgAdNAYWHgsNSV9ZXUlzS0VbCgYNNAsMBkdDS1RVYUVZSQgcHxcQCDodCggYDAAmHwQSDgtbUUUiYUVZS0UCYUVZS0VZS0cdCggYDABbUUVIR29ZS0VZS0VbDgscBgwcGEdDS0c6HgkNAhYNSUlzS0VZS0VZSQMVBAoLSV9ZWklzS0VZS0VZSREMGQsKSV9ZX29ZS0VZFklzS0VZSx5zS0VZS0VZSQEYBgQeDkdDS1dVYUVZS0VZS0ccBQAUAgAKSV9ZSS8YHEUuBBcUSUlzS0VZS0VZSQMVBAoLSV9ZWUlzS0VZS0VZSREMGQsKSV9ZWG9ZS0VZFklzS0VZSx5zS0VZS0VZSQEYBgQeDkdDS1VVYUVZS0VZS0ccBQAUAgAKSV9ZSVdZJwoMGABbR29ZS0VZS0VbDQkWBBdbUUVKR29ZS0VZS0VbHxALBRZbUUVKYUVZS0UER29ZS0VZEG9ZS0VZS0VbDwQUCgIcSV9ZWF1VYUVZS0VZS0ccBQAUAgAKSV9ZSSILDggVAgtZJQobSUlzS0VZS0VZSQMVBAoLSV9ZXUlzS0VZS0VZSREMGQsKSV9ZXW9ZS0VZFm9ZSzhVYUVZSQILDgAXSV9ZW0lzS0VbBhwKHwALEjoUCgYRAgscSV9ZX0lzS0VbBgANGQwaNAYYBhUfAhccNBAJDBcYDwAdSV9ZW0lzS0VbGwoNAgoXNBYVBBEKSV9ZWElzS0VbCA0WGAAmBQAWHDoLDhIYGQFbUUUfCgkKDklzS0VbDhMcBREmGAAcDzoaBBAXH0dDS1FVYUVZSQgcHxcQCDoLDgkQCBYmBAcNCgwXDgFbUUUiYUVZS0UCYUVZS0VZS0cfBwoWGUdDS1NVYUVZS0VZS0cSDhxbUUVbPgsaDgQKAgseSzEWG0dzS0VZSxhVYUVZS0UCYUVZS0VZS0cfBwoWGUdDS1xVYUVZS0VZS0cSDhxbUUVbOBwUCQwWHwwaSzMQGRAKSW9ZS0VZFm9ZSzhVYUVZSQEYAgkANAEYHwBbUUVJR29ZS0cWCREYAgscDzoaChcdGEdDSx5zS0VZS0c9BBAbBwBZLgscGQIASV9ZWklzS0VZS0ctHhcbBEdDS1RVYUVZS0VbKAoWBw0cCgEcD0dDS1RVYUVZS0VbOBEYHwwaSyEQGAYRChceDkdDS1RVYUVZS0VbKAoVD0UqBQQJSV9ZWm9ZSxhVYUVZSRUVChwmHwwUDkdDS1dKXElzS0VbAwQXDzoKAh8cSV9ZXklzS0VbBgQBNA0cCgkNA0dDS1JMR29ZS0cUBAsKHwALNBYcDgEmCAoMBRFbUUVNWklzS0VbGwoNAgoXGEdDSz5zS0VZS0cpBBEQBAtZOAkWH0dVYUVZS0VbOwoNAgoXSzYVBBFbR29ZS0VZSTUWHwwWBUUqBwoNSW9ZSzhzFg==");

    let deobf_arguments = Args {
        command: Commands::Deobf,
        input: testing_string.clone(),
        output_file: None,
    };

    let intermediary = spire_encoder_decoder(&deobf_arguments).unwrap(); 

    let obf_arguments = Args {
        command: Commands::Obf,
        input: intermediary,
        output_file: None,
    };

    let result = spire_encoder_decoder(&obf_arguments).unwrap();

    assert_eq!(testing_string, result);
}